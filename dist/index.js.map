{
  "version": 3,
  "sources": ["../src/apx/plugins/index.ts"],
  "sourcesContent": [
    "import { existsSync, mkdirSync, writeFileSync, readFileSync } from \"fs\";\nimport { join, resolve } from \"path\";\nimport { type Plugin } from \"vite\";\nimport { spawn, type ChildProcess } from \"child_process\";\nimport { createHash } from \"crypto\";\nimport { generate, type OutputOptions } from \"orval\";\n\n// Cache for OpenAPI spec hashes to detect changes\nconst specHashCache = new Map<string, string>();\n\nexport type StepAction = string | (() => void | Promise<void>);\n\nexport type StepSpec = {\n  name: string;\n  action: StepAction;\n};\n\nexport const Step = (spec: StepSpec): StepSpec => spec;\n\n/**\n * Predefined step for generating OpenAPI schema\n * @param appModule - The Python module path (e.g., \"sample.api.app:app\")\n * @param outputPath - Where to write the OpenAPI JSON file\n */\nexport const OpenAPI = (appModule: string, outputPath: string): StepSpec => ({\n  name: \"openapi\",\n  action: `uv run --no-sync apx openapi ${appModule} ${outputPath}`,\n});\n\n/**\n * Predefined step for generating API client with Orval\n * Skips generation if the OpenAPI spec hasn't changed since last run\n * @param input - Path to the OpenAPI spec file\n * @param output - Orval output configuration\n */\nexport const Orval = ({\n  input,\n  output,\n}: {\n  input: string;\n  output: OutputOptions;\n}): StepSpec => ({\n  name: \"orval\",\n  action: async () => {\n    // Check if spec file exists\n    if (!existsSync(input)) {\n      console.warn(\n        `[apx] OpenAPI spec not found at ${input}, skipping Orval generation`,\n      );\n      return;\n    }\n\n    // Read and hash the spec file\n    const specContent = readFileSync(input, \"utf-8\");\n    const specHash = createHash(\"sha256\").update(specContent).digest(\"hex\");\n\n    // Check if spec has changed\n    const cachedHash = specHashCache.get(input);\n    if (cachedHash === specHash) {\n      console.log(`[apx] OpenAPI spec unchanged, skipping Orval generation`);\n      return;\n    }\n\n    // Generate API client\n    await generate({\n      input,\n      output,\n    });\n\n    // Update cache\n    specHashCache.set(input, specHash);\n  },\n});\n\nexport interface ApxPluginOptions {\n  steps?: StepSpec[];\n  ignore?: string[];\n}\n\nexport function apx(options: ApxPluginOptions = {}): Plugin {\n  const { steps = [], ignore = [] } = options;\n\n  let outDir: string;\n  let timer: NodeJS.Timeout | null = null;\n  let stopping = false;\n  let resolvedIgnores: string[] = [];\n  let isRunningSteps = false;\n  let childProcesses: ChildProcess[] = [];\n\n  /**\n   * Executes a shell command using spawn, with proper signal handling\n   */\n  function executeShellCommand(command: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (stopping) {\n        console.log(`[apx] Skipping command (stopping): ${command}`);\n        resolve();\n        return;\n      }\n\n      console.log(`[apx] Executing: ${command}`);\n\n      // Parse command into command and args\n      const parts = command.split(/\\s+/);\n      const cmd = parts[0];\n      const args = parts.slice(1);\n\n      // Spawn process with proper signal handling\n      const child = spawn(cmd, args, {\n        stdio: \"inherit\", // Forward stdout/stderr to parent\n        shell: true, // Use shell for proper command parsing\n        detached: false, // Keep in same process group for signal propagation\n      });\n\n      // Track child process for cleanup\n      childProcesses.push(child);\n\n      child.on(\"error\", (err) => {\n        console.error(`[apx] Process error:`, err);\n        reject(err);\n      });\n\n      child.on(\"exit\", (code, signal) => {\n        // Remove from tracking\n        childProcesses = childProcesses.filter((p) => p.pid !== child.pid);\n\n        if (signal) {\n          console.log(\n            `[apx] Process ${child.pid} exited with signal: ${signal}`,\n          );\n          resolve(); // Treat signal termination as success for cleanup scenarios\n        } else if (code !== 0) {\n          console.error(`[apx] Process ${child.pid} exited with code: ${code}`);\n          reject(new Error(`Command failed with exit code ${code}`));\n        } else {\n          resolve();\n        }\n      });\n\n      // If we're stopping, kill the process immediately\n      if (stopping && child.pid) {\n        console.log(`[apx] Killing process ${child.pid} (stopping)`);\n        killProcess(child);\n      }\n    });\n  }\n\n  /**\n   * Kills a process and all its children\n   */\n  function killProcess(proc: ChildProcess): void {\n    if (!proc.pid) return;\n\n    try {\n      // On Unix-like systems, kill the process group\n      // Negative PID kills the entire process group\n      if (process.platform !== \"win32\") {\n        process.kill(-proc.pid, \"SIGTERM\");\n        console.log(`[apx] Sent SIGTERM to process group -${proc.pid}`);\n      } else {\n        // On Windows, just kill the process\n        proc.kill(\"SIGTERM\");\n        console.log(`[apx] Sent SIGTERM to process ${proc.pid}`);\n      }\n    } catch (err) {\n      console.error(`[apx] Error killing process ${proc.pid}:`, err);\n      // Try forceful kill as fallback\n      try {\n        proc.kill(\"SIGKILL\");\n      } catch (e) {\n        // Ignore errors on forceful kill\n      }\n    }\n  }\n\n  async function executeAction(action: StepAction): Promise<void> {\n    if (stopping) {\n      console.log(`[apx] Skipping action (stopping)`);\n      return;\n    }\n\n    ensureOutDirAndGitignore();\n    if (typeof action === \"string\") {\n      // Execute as shell command\n      await executeShellCommand(action);\n    } else {\n      // Execute as function\n      if (stopping) return;\n      await action();\n    }\n    ensureOutDirAndGitignore();\n  }\n\n  async function runAllSteps(): Promise<void> {\n    if (stopping) {\n      console.log(`[apx] Skipping steps (stopping)`);\n      return;\n    }\n\n    if (isRunningSteps) {\n      console.log(`[apx] Steps already running, skipping...`);\n      return;\n    }\n\n    console.log(`[apx] Running ${steps.length} step(s)...`);\n    isRunningSteps = true;\n\n    try {\n      for (const step of steps) {\n        if (stopping) {\n          console.log(`[apx] Stopping during step execution`);\n          break;\n        }\n        const start = Date.now();\n        try {\n          console.log(`[apx] ${step.name} ⏳`);\n          await executeAction(step.action);\n          console.log(`[apx] ${step.name} ✓ (${Date.now() - start} ms)`);\n        } catch (err) {\n          console.error(`[apx] ${step.name} ✗`, err);\n          throw err;\n        }\n      }\n      console.log(`[apx] All steps completed`);\n    } finally {\n      isRunningSteps = false;\n    }\n  }\n\n  /**\n   * Ensures the output directory exists and contains a .gitignore file.\n   * This is called at multiple points to guarantee the directory is always present.\n   */\n  function ensureOutDirAndGitignore(): void {\n    if (!outDir) {\n      console.error(`[apx] outDir is not set`);\n      return;\n    }\n\n    try {\n      // Always ensure the output directory exists\n      if (!existsSync(outDir)) {\n        mkdirSync(outDir, { recursive: true });\n      }\n\n      // Always ensure .gitignore exists in output directory\n      const gitignorePath = join(outDir, \".gitignore\");\n      if (!existsSync(gitignorePath)) {\n        writeFileSync(gitignorePath, \"*\\n\");\n      }\n    } catch (err) {\n      console.error(`[apx] failed to ensure output directory:`, err);\n    }\n  }\n\n  function stop(): void {\n    if (stopping) return;\n    console.log(`[apx] Stopping... (${childProcesses.length} child processes)`);\n    stopping = true;\n\n    // Clear any pending timers\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // Kill all tracked child processes\n    if (childProcesses.length > 0) {\n      console.log(\n        `[apx] Killing ${childProcesses.length} child process(es)...`,\n      );\n      childProcesses.forEach((proc) => {\n        if (proc.pid) {\n          killProcess(proc);\n        }\n      });\n      childProcesses = [];\n    }\n\n    console.log(`[apx] Stopped`);\n  }\n\n  function reset(): void {\n    console.log(`[apx] Resetting plugin state`);\n    stopping = false;\n    timer = null;\n    isRunningSteps = false;\n    childProcesses = [];\n  }\n\n  return {\n    name: \"apx\",\n    apply: () => true,\n\n    configResolved(config) {\n      outDir = resolve(config.root, config.build.outDir);\n      resolvedIgnores = ignore.map((pattern) =>\n        resolve(process.cwd(), pattern),\n      );\n\n      // Reset state for new build\n      reset();\n\n      // Ensure directory exists as soon as we know the outDir\n      ensureOutDirAndGitignore();\n    },\n\n    configureServer(server) {\n      // Let Vite handle SIGINT/SIGTERM - we'll clean up via server.close and closeBundle\n      // DON'T add signal handlers here as they interfere with Vite's signal handling\n      // See: https://github.com/vitejs/vite/issues/11434\n      server.httpServer?.once(\"close\", () => {\n        console.log(`[apx] Server closing, stopping plugin...`);\n        stop();\n      });\n\n      // Ensure directory exists when server starts\n      ensureOutDirAndGitignore();\n    },\n\n    async buildStart() {\n      // Ensure directory exists before build starts\n      ensureOutDirAndGitignore();\n\n      if (steps.length > 0) {\n        await runAllSteps();\n      }\n    },\n\n    handleHotUpdate(ctx) {\n      // Ensure directory exists on every HMR update\n      ensureOutDirAndGitignore();\n\n      // Don't trigger updates if stopping\n      if (stopping) {\n        console.log(`[apx] HMR update ignored (stopping)`);\n        return;\n      }\n\n      // Check if file should be ignored\n      if (resolvedIgnores.some((pattern) => ctx.file.includes(pattern))) {\n        return;\n      }\n\n      console.log(`[apx] HMR update detected: ${ctx.file}`);\n\n      // Debounce step execution on HMR updates\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      timer = setTimeout(async () => {\n        timer = null;\n\n        // Double-check we're not stopping before running\n        if (stopping) {\n          return;\n        }\n        // Ensure directory exists before running steps\n        ensureOutDirAndGitignore();\n        await runAllSteps();\n\n        // Ensure directory exists after running steps\n        ensureOutDirAndGitignore();\n      }, 100);\n\n      // Allow the process to exit even if this timer is pending\n      timer.unref();\n    },\n\n    writeBundle() {\n      // Ensure directory exists after files are written\n      ensureOutDirAndGitignore();\n    },\n\n    closeBundle() {\n      // Ensure directory exists one final time\n      ensureOutDirAndGitignore();\n      stop();\n    },\n  };\n}\n\n// Default export for convenience: import apx from \"apx\"\nexport default apx;\n"
  ],
  "mappings": "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",
  "debugId": "6C9FA3B7E9A2A7F164756E2164756E21",
  "names": []
}